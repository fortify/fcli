// the buildscript section is temporary until the missing dependency issue is resolved.
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath ("org.ysb33r.gradle:grolifant:0.16.2") {
            force = true
        }
    }
}

plugins {
    id('com.github.jk1.dependency-license-report') version '2.1'
    id "org.kordamp.gradle.markdown" version "2.2.0"
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("io.micronaut.application") version "3.6.4" apply false
    id("io.micronaut.library") version "3.6.4" apply false
    id 'eclipse'
    id "com.github.ben-manes.versions" version "0.44.0"
    id "org.asciidoctor.jvm.convert" version "3.3.2"
}

group = "com.fortify.cli"

ext.buildTime = LocalDateTime.now()
ext.getVersion = {
    def result = project.findProperty('version');
    return !result || result=='unspecified' ? buildTime.format('0.yyyyMMdd.HHmmss') : result;
}
version = ext.getVersion();

apply plugin: "io.micronaut.application"
subprojects {
    apply plugin: "io.micronaut.library"
    apply plugin: 'eclipse'
}

application {
    mainClass.set("com.fortify.cli.app.FortifyCLI")
}
shadowJar {
    archiveBaseName.set('fcli')
    archiveClassifier.set('')
    archiveVersion.set('')
}

allprojects {
    java {
        sourceCompatibility = JavaVersion.toVersion("11")
        targetCompatibility = JavaVersion.toVersion("11")
    }
    compileJava {
        options.compilerArgs += ["-Averbose=true"]
    }
    micronaut {
        testRuntime("junit5")
        processing {
            incremental(true)
            annotations("com.fortify.cli.*")
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        // Lombok dependency & annotation processor
        compileOnly 'org.projectlombok:lombok:1.18.24'
        annotationProcessor 'org.projectlombok:lombok:1.18.24'

        // Picocli dependency and annotation processor. Note that for now, we cannot use 4.7.0 due to https://github.com/remkop/picocli/issues/1876
        annotationProcessor("info.picocli:picocli-codegen:4.6.3")
        
        // TODO Re-enable this line (with appropriate version) once new picocli is released
        //implementation("info.picocli:picocli:4.6.3")

        annotationProcessor("io.micronaut:micronaut-inject-java:3.4.2")
        annotationProcessor("io.micronaut:micronaut-graal:3.4.2")

        // Micronaut dependencies
        implementation("io.micronaut:micronaut-runtime:3.4.2")
        implementation("io.micronaut.picocli:micronaut-picocli:4.1.0") {
            exclude group: 'info.picocli'
        }
        implementation("javax.annotation:javax.annotation-api")

        // Logback dependency to allow us to configure logging programmatically
        implementation("ch.qos.logback:logback-classic:1.2.11")

        implementation('com.konghq:unirest-java:3.13.11') {
            exclude group: 'com.google.code.gson', module: 'gson' // We use Jackson, so no need for Gson
            exclude group: 'commons-logging', module: 'commons-logging' // We use jcl-over-slf4j
        }
        implementation('com.konghq:unirest-objectmapper-jackson:3.13.11')

        implementation('com.jayway.jsonpath:json-path:2.7.0') {
            //exclude group: 'net.minidev', module: 'json-smart'
        }

        // for yaml support and generating trees/tables
        implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.13.2')
        implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-csv:2.13.2')
        implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.13.2")
        implementation('hu.webarticum:tree-printer:2.0.0')
        implementation('com.github.freva:ascii-table:1.2.0')
        
        // Encryption library
        implementation('org.jasypt:jasypt:1.9.3:lite')
    }
}

// TODO Remove this block once new picocli is released 
configure(allprojects.findAll {it.name != 'fcli-picocli-patches'}) {
    dependencies {
        implementation project(':fcli-picocli-patches')
    }
    
    // Micronaut is supposed to generate a resource-config.json file that includes all resources,
    // but for some reason this doesn't work, so we generate our own resource-config.json file for
    // each module
    ext.generatedResourceConfigDir = "${buildDir}/generated-resource-config"
    tasks.register('generateResourceConfig') {
        doLast {
            def outputDir = "${generatedResourceConfigDir}/META-INF/native-image/fcli-generated/${project.name}";
            mkdir "${outputDir}"
            def entries = [];
            fileTree(dir: 'src/main/resources', excludes: ['**/i18n/**', 'META-INF/**'])
                .visit {e -> if ( !e.isDirectory() ) {entries << '\n  {"pattern":"'+e.relativePath+'"}'}};
            if ( entries.size>0 ) {
                def contents = '{"resources":[' + entries.join(",") + '\n]}';
                file("${outputDir}/resource-config.json").text = contents;
                println contents
            }
        }
    }
    sourceSets.main.output.dir generatedResourceConfigDir, builtBy: generateResourceConfig
}

// TODO Remove fcli-picocli-patches condition once new picocli is released
configure(allprojects.findAll {it.name != 'fcli-common' && it.name != 'fcli-picocli-patches'}) {
    dependencies {
        implementation project(':fcli-common')
    }
}

dependencies {
    implementation project(':fcli-config')
    implementation project(':fcli-ssc')
    implementation project(':fcli-fod')
    implementation project(':fcli-sc-sast')
    implementation project(':fcli-sc-dast')
    implementation project(':fcli-tool')

    // Logging dependencies
    runtimeOnly('ch.qos.logback:logback-classic:1.2.11')
    runtimeOnly('org.slf4j:jcl-over-slf4j:1.7.36')

    // GraalVM dependency
    compileOnly("org.graalvm.nativeimage:svm")
}

ext {
    gradleHelpersLocation = "https://raw.githubusercontent.com/fortify-ps/gradle-helpers/1.6"
    thirdPartyBaseName = "${rootProject.name}"
    autoCompleteDir = "${project.buildDir}/autocomplete"
}
apply from: "${gradleHelpersLocation}/thirdparty-helper.gradle"
apply from: "${gradleHelpersLocation}/readme2html.gradle"

mainClassName = "com.fortify.cli.app.FCLIRootCommands"

ext.buildPropertiesDir = "${buildDir}/generated-build-properties"
task generateFcliBuildProperties {
    doLast {
        def outputDir = "${buildPropertiesDir}/com/fortify/cli/app"
        mkdir "${outputDir}"
        ant.propertyfile(file: "${outputDir}/fcli-build.properties") {
            entry(key: "projectName", value: project.name)
            entry(key: "projectVersion", value: project.version)
            entry(key: "buildDate", value: buildTime.format('yyyy-MM-dd HH:mm:ss'))
        }
    }
}
sourceSets.main.output.dir buildPropertiesDir, builtBy: generateFcliBuildProperties

tasks.register('generateAutoCompleteDir') {
    doLast {
        mkdir "${autoCompleteDir}"
    }
}

task generateAutoComplete(type: JavaExec) {
    dependsOn(classes, generateAutoCompleteDir)
    group = "Documentation"
    description = "Generate autocomplete"
    classpath(configurations.runtimeClasspath, configurations.annotationProcessor, sourceSets.main.runtimeClasspath)
    main 'picocli.AutoComplete'
    args mainClassName, "-f", "--completionScript=${autoCompleteDir}/fcli_completion"
}

task generateManpageAsciiDoc(type: JavaExec) {
    dependsOn(classes)
    group = "Documentation"
    description = "Generate AsciiDoc manpage"
    classpath(configurations.runtimeClasspath, configurations.annotationProcessor, sourceSets.main.runtimeClasspath)
    main 'picocli.codegen.docgen.manpage.ManPageGenerator'
    args mainClassName, "--outdir=${project.buildDir}/generated-picocli-docs", "-v"
}

asciidoctor {
    dependsOn(generateManpageAsciiDoc)
    sourceDir = file("${project.buildDir}/generated-picocli-docs")
    outputDir = file("${project.buildDir}/docs")
    logDocuments = true
    outputOptions {
        backends = ['manpage', 'html5']
    }
}

tasks.register('distDocsHtml5', Zip) {
    dependsOn 'asciidoctor'
    archiveFileName = "docs-html.zip"
    destinationDirectory = layout.buildDirectory.dir('dist')
    from layout.buildDirectory.dir("docs/html5")
}

tasks.register('distDocsManPage', Zip) {
    dependsOn 'asciidoctor'
    archiveFileName = "docs-manpage.zip"
    destinationDirectory = layout.buildDirectory.dir('dist')
    from layout.buildDirectory.dir("docs/manpage")
}

task distDocs {
    dependsOn 'distDocsHtml5', 'distDocsManPage'
}

task dist(type: Copy) {
    dependsOn 'build', 'readme2html', 'distDocs', 'generateAutoComplete'
    from "${buildDir}/html"
    from "${autoCompleteDir}"
    from("${projectDir}") {
        include "config/**/*"
        include "LICENSE.TXT"
    }
    from("${buildDir}/${libsDirName}") {
        include "${rootProject.name}.jar"
    }
    into "$buildDir/dist"
}
