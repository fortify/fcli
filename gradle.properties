# These properties define the locations of the various fcli sub-projects.
# These properties are used in settings.gradle to define the various includes,
# and in build.gradle files for declaring inter-project dependencies. Where
# needed, the corresponding project directory path can be obtained through the
# getRefDir(ref) function.
fcliAppRef=:fcli-core:fcli-app
fcliCommonRef=:fcli-core:fcli-common
fcliConfigRef=:fcli-core:fcli-config
fcliFoDRef=:fcli-core:fcli-fod
fcliSCDastRef=:fcli-core:fcli-sc-dast
fcliSCSastRef=:fcli-core:fcli-sc-sast
fcliSSCRef=:fcli-core:fcli-ssc
fcliToolRef=:fcli-core:fcli-tool
fcliLicenseRef=:fcli-core:fcli-license
fcliUtilRef=:fcli-core:fcli-util

fcliBomRef=:fcli-other:fcli-bom
fcliFunctionalTestRef=:fcli-other:fcli-functional-test
fcliAutoCompleteRef=:fcli-other:fcli-autocomplete
fcliDocRef=:fcli-other:fcli-doc
# TODO Remove once patch is available for
# https://github.com/formkiq/graalvm-annotations-processor/issues/9
patchGraalVMAnnotationsProcessorRef=:fcli-other:patches:graalvm-annotations-processor-patch

# Comma-separated list of patterns that should match all of the *Ref properties above
refPatterns=fcli.+Ref,patchGraalVMAnnotationsProcessorRef

# Location of shared Gradle scripts, relative from project root, used to set the
# sharedGradleScriptsDir property in the top-level build.gradle file
sharedGradleScriptsRelativeDir=fcli-other/fcli-gradle

// Define the class names of the fcli top-level @Command class, used for generating manual pages, 
// reflect-config.json, ... 
// FortifyCLITest checks that this property contains a valid class name.
fcliRootCommandsClassName=com.fortify.cli.app._main.cli.cmd.FCLIRootCommands

// Define the main class name for running fcli. 
// FortifyCLITest checks that this property contains a valid class name.
fcliMainClassName=com.fortify.cli.app.FortifyCLI

// Define fcli action schema version. This must be manually maintained, and must
// be updated whenever the action schema model is changed:
// - Increase patch version for non-structural changes, like description updates.
// - Increase minor version for backward-compatible structural changes, like
//   adding new (optional) step types or adding new optional properties to existing
//   types.
// - Increase major version for non-backward-compatible changes, like adding new 
//   required properties, or changing the meaning/value type of an existing property.
// To allow for proper detection of whether a given fcli version is compatible with a 
// given schema version, it is very important to maintain this correctly. At all cost,
// we should avoid for example updating only patch version if there are any structural
// changes. 
fcliActionSchemaVersion=1.0.0
