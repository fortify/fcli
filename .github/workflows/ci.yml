name: Build and release
on:
  push:
    branches:
      - '**'
       
env:
  native_image_opts: --verbose -H:Log=registerResource:verbose
          
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check-out source code
        uses: actions/checkout@v3

      - name: PROD - Prepare GitHub release
        id: create_prod_release
        uses: GoogleCloudPlatform/release-please-action@v2
        if: github.ref == 'refs/heads/main'
        with:
          command: github-release
          release-type: simple
          package-name: ${{ github.event.repository.name }}  
          
      - name: PROD - Define release info
        if: steps.create_prod_release.outputs.release_created
        run: |
          tag=${{steps.create_prod_release.outputs.tag_name}}
          version=${{steps.create_prod_release.outputs.version}}
          major=${{steps.create_prod_release.outputs.major}}
          minor=${{steps.create_prod_release.outputs.minor}}
          patch=${{steps.create_prod_release.outputs.patch}}  
          echo DO_BUILD=true >> $GITHUB_ENV
          echo DO_RELEASE=true >> $GITHUB_ENV
          echo DO_PROD_RELEASE=true >> $GITHUB_ENV
          echo RELEASE_TAG=${tag} >> $GITHUB_ENV
          echo RELEASE_VERSION=${version} >> $GITHUB_ENV
          
      - name: DEV - Define release info
        if: startsWith(github.ref, 'refs/heads/') && !env.DO_PROD_RELEASE
        run: |
          branch="${GITHUB_REF#refs/heads/}"
          tag="dev_${branch//[^a-zA-Z0-9_.-]/.}" # Replace all special characters by a dot
          version="0.$(date +'%Y%m%d.%H%M%S')-${tag}"
          echo DO_BUILD=true >> $GITHUB_ENV # We always want to do a build if we're building a branch
          echo BRANCH=${branch} >> $GITHUB_ENV
          echo RELEASE_TAG=${tag} >> $GITHUB_ENV
          echo RELEASE_VERSION=${version} >> $GITHUB_ENV
          
          if git ls-remote --exit-code origin refs/tags/${tag} >/dev/null 2>&1; then
            echo "Found tag ${tag}, development release will be published"
            echo DO_RELEASE=true >> $GITHUB_ENV
            echo DO_DEV_RELEASE=true >> $GITHUB_ENV
          else 
            echo "Tag ${tag} does not exist, no development release will be published"
          fi 
      
      - name: Build release ${{env.RELEASE_VERSION}}
        if: env.DO_BUILD
        run: ./gradlew clean build dist distThirdParty -Pversion=${{env.RELEASE_VERSION}}
        
      - name: Publish build artifacts
        uses: actions/upload-artifact@v3
        with:
          path: build/dist/*
          
    outputs:
      do_release: ${{ env.DO_RELEASE }}
      do_dev_release: ${{ env.DO_RELEASE }}
      release_tag: ${{ env.RELEASE_TAG }}

  native_linux:
    name: native-image-linux
    needs: build
    runs-on: ubuntu-22.04
    env:
      TOOLCHAIN_BASE: /opt/musl_cc
      TOOLCHAIN_DIR: /opt/musl_cc/x86_64-linux-musl-native
      CC: /opt/musl_cc/x86_64-linux-musl-native/bin/gcc
    steps:
      - name: Check-out source code
        uses: actions/checkout@v3

      # Next two actions are prerequisites for creating a statically linked binary of fcli.
      - name: Install musl toolchain
        run: |
          wget --no-check-certificate 'https://github.com/fortify-ps/fcli/raw/musl-cc/v10/x86_64-linux-musl-native.tgz' -O x86_64-linux-musl-native.tgz;
          mkdir -p $TOOLCHAIN_BASE;
          tar -zxvf x86_64-linux-musl-native.tgz -C $TOOLCHAIN_BASE;
          ln -s $TOOLCHAIN_DIR/bin/gcc $TOOLCHAIN_DIR/bin/musl-gcc;
          echo "$TOOLCHAIN_DIR/bin" >> $GITHUB_PATH

      - name: Install zlib
        run: |
          wget https://zlib.net/zlib-1.2.13.tar.gz; 
          mkdir zlib; 
          tar -zxvf zlib-1.2.13.tar.gz; 
          cd zlib-1.2.13; 
          sudo ./configure --prefix=$TOOLCHAIN_DIR --static; 
          make; 
          sudo make install

      - uses: DeLaGuardo/setup-graalvm@5.0
        with:
          graalvm-version: '21.2.0.java11'

      - name: Install GraalVM's native-image extension
        run: gu install native-image

      - uses: actions/download-artifact@v3
        with:
          path: ./

      - name: Create native fcli
        run: native-image ${{ env.native_image_opts }} --static --libc=musl -jar ./artifact/fcli.jar fcli

      - name: Compress native fcli
        uses: svenstaro/upx-action@v2
        with:
          file: fcli

      - name: Basic test of native fcli
        run: ./fcli --help && ./fcli get --help

      - name: Package native fcli
        run: tar -zcvf fcli-linux.tgz fcli -C ./artifact fcli_completion

      - uses: actions/upload-artifact@v3
        with:
          path: ./fcli-linux.tgz

  native_mac:
    name: native-image-mac
    needs: build
    runs-on: macos-12
    steps:
      - name: Check-out source code
        uses: actions/checkout@v3

      - uses: DeLaGuardo/setup-graalvm@5.0
        with:
          graalvm-version: '21.2.0.java11'

      - name: Install GraalVM's native-image extension
        run: gu install native-image

      - uses: actions/download-artifact@v3
        with:
          path: ./

      - name: Create native fcli
        run: native-image ${{ env.native_image_opts }} -jar ./artifact/fcli.jar fcli

      - name: Compress native fcli
        uses: svenstaro/upx-action@v2
        with:
          file: fcli

      - name: Basic test of native fcli
        run: ./fcli --help && ./fcli get --help

      - name: Package native fcli
        run: tar -zcvf fcli-mac.tgz fcli -C ./artifact fcli_completion

      - uses: actions/upload-artifact@v3
        with:
          path: ./fcli-mac.tgz

  native_win:
    name: native-image-win
    needs: build
    runs-on: windows-2022
    steps:
    - uses: DeLaGuardo/setup-graalvm@5.0
      with:
        graalvm-version: '21.2.0.java11'

    - name: Install GraalVM's native-image extension
      run: ${{ env.JAVA_HOME }}\bin\gu.cmd install native-image

    - uses: actions/download-artifact@v3
      with:
        path: ./
    
    - name: Create native fcli
      run: >-
        "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" &&
        ${{ env.JAVA_HOME }}\bin\native-image.cmd ${{ env.native_image_opts }} -jar .\artifact\fcli.jar fcli
      shell: cmd

    - name: Compress native fcli
      uses: svenstaro/upx-action@v2
      with:
        file: fcli.exe

    - name: Basic test of native fcli
      run: |
        .\fcli.exe --help 
        .\fcli.exe get --help

    - name: Package native fcli
      run: 7z a fcli-windows.zip fcli*.exe

    - uses: actions/upload-artifact@v3
      with:
        path: ./fcli-windows.zip
        
  release:
    name: release
    if: needs.build.outputs.do_release
    needs: [build, native_linux, native_mac, native_win]
    runs-on: ubuntu-latest
    steps:
      - name: Check-out source code
        uses: actions/checkout@v3
        
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./
          
      - name: Remove fcli_completion script
        run: rm -f artifact/fcli_completion
          
      - name: PROD - Prepare release PR
        if: github.ref == 'refs/heads/main'
        uses: GoogleCloudPlatform/release-please-action@v2
        with:
          command: release-pr
          release-type: simple
          package-name: ${{ github.event.repository.name }}
          
      - name: DEV - Prepare GitHub release 
        if: needs.build.outputs.do_dev_release
        run: |
          gh release delete ${{ needs.build.outputs.release_tag }} -y || true
          gh release create ${{ needs.build.outputs.release_tag }} -p -t "Development Release - ${GITHUB_REF#refs/heads/} branch" -n 'See `Assets` section below for latest build artifacts'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: DEV - Update ${{ needs.build.outputs.release_tag }} tag
        uses: richardsimko/update-tag@v1
        if: needs.build.outputs.do_dev_release
        with:
          tag_name: ${{ needs.build.outputs.release_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
          
      - name: Upload assets to release
        if: needs.build.outputs.do_release
        run: |
          files=$(find "./artifact" -type f -printf "%p ")
          gh release upload "${{ needs.build.outputs.release_tag }}" $files --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
     
  publishPages:
    name: publishPages
    if: needs.build.outputs.do_release
    needs: [build, release]
    runs-on: ubuntu-latest
    steps:
      - name: Check-out existing docs from gh-pages branch
        uses: actions/checkout@v3
        with:
          ref: gh-pages
          path: docs
        
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./
          
      - name: Update documentation from artifact
        run: |
          # Delete all Git-related files
          rm -rf docs/.git*
          
          # Define the output directory, based on tag/branch name
          dir=docs/${{ needs.build.outputs.release_tag }}
          
          # Delete, recreate and fill the directory for the current tag/branch name,
          # while leaving documentation for other tags/branches intact (as checked out above)
          rm -rf "${dir}"
          mkdir -p "${dir}"
          unzip artifact/docs-html.zip -d "${dir}"
          
      - name: Deploy documentation
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          enable_jekyll: true
          
          
  cleanup:
    name: cleanup
    if: needs.build.outputs.do_release 
    needs: [release, publishPages] 
    runs-on: ubuntu-latest 
    steps:
      - name: Delete artifacts if uploaded to release
        uses: geekyeggo/delete-artifact@v1
        with:
          name: artifact
          failOnError: false   
