# Used to 'productize' some descriptions defined in FortifyCLIMessages.properties
product=SSC
default-connect-timeout = 10 seconds
default-socket-timeout = 5 minutes

# Make sure none of the commands inherit usage header or description of the top-level fcli command
# Note that we define these as usage.* whereas our parent bundle defines fcli.usage.* (with fcli prefix).
# For some reason, overriding fcli.usage.* doesn't work.
usage.header = 
usage.description = 

# fcli ssc
fcli.ssc.usage.header = Interact with Fortify Software Security Center (SSC).
fcli.ssc.usage.description.0 = The commands in this module allow for interacting with \
  Fortify Software Security Center (SSC). This includes functionality like managing \
  applications, application versions and their contents like artifacts and vulnerability \
  data, as well as working with other SSC entities like event logs, alerts, plugins, and so on.  
fcli.ssc.usage.description.1 = %nBefore being able to interact with SSC, a session will need \
  to be created by passing SSC URL and credentials to the 'session login' command in this \
  module. As a best practice, 'session logout' should be run to terminate the session when \
  there are no more activities to be performed.  

# Shared options
delim = Change the default delimiter character when using options that accept \
  "application:version" as an argument or parameter. 
download.no-include-sources = Sources are included by default; use --no-include-sources to \
  download artifact without sources.
upload.filePath = The path to the file to be uploaded.
allow-multi-match = Allow for multiple matches.
fcli.ssc.q-param = Server-side queries are automatically generated from the -q / --query option \
  if possible; generated queries can be viewed in the debug log. The --q-param option can be used \
  to override the automatically generated query, for example to further optimize the request. See \
  SSC REST API documentation for information on supported formats.

# fcli ssc session
user.0 = SSC user name.
user.1 = Environment variables:%n \
  ${fcli.env.default.prefix}_SSC_USER: Shared with SC SAST/DAST%n \
  ${fcli.env.default.prefix}_SSC_SESSION_USER: Only SSC session commands
password.0 = SSC password.
password.1 = Environment variables:%n \
  ${fcli.env.default.prefix}_SSC_PASSWORD: Shared with SC SAST/DAST%n \
  ${fcli.env.default.prefix}_SSC_SESSION_PASSWORD: Only SSC session commands
ci-token.0 = SSC CIToken in either encoded (REST) or decoded (application) format. \
  Tokens can be created through the SSC web UI, or using the \
  'fcli ssc access-control create-token' command. Note that most, but not all, fcli commands \
  are available when logging in with a CIToken.
ci-token.1 = Environment variables:%n \
  ${fcli.env.default.prefix}_SSC_CI_TOKEN: Shared with SC SAST/DAST%n \
  ${fcli.env.default.prefix}_SSC_SESSION_CI_TOKEN: Only SSC session commands

fcli.ssc.session.usage.header = Manage SSC sessions (start here).
fcli.ssc.session.usage.description = The session commands allow for managing one or more \
  SSC sessions used to connect to a particular SSC instance with particular credentials. \
  Potentially you can have multiple open SSC sessions, for example connecting to different \
  SSC instances like DEV and PROD, or connecting to the same SSC instance but with different \
  credentials.
  
fcli.ssc.session.login.usage.header = Create a session for interacting with Fortify SSC.
fcli.ssc.session.login.usage.description.0 = This command stores the SSC URL and authentication \
  token in an encrypted session file in the fcli state data folder, for use by other 'fcli ssc' \
  commands to connect to the specified SSC instance. Option values may be passed on the command \
  line or specified through environment variables (common for CI/CD pipeline use) as listed below.
fcli.ssc.session.login.usage.description.1 = %nWhen logging in with username and password, this \
  command will connect to SSC to generate a UnifiedLoginToken; the user password is not stored \
  by fcli. When logging in with a pre-generated token, this token will be stored as-is. Note \
  that due to SSC limitations, fcli cannot validate whether the given token is a valid SSC token, \
  and doesn't known when it will expire. If an invalid or expired token is given, the 'login' \
  command may still succeed but subsequent 'fcli ssc' commands will fail. Also note that depending \
  on token type, some 'fcli ssc' commands may fail due to the token not being allowed to access \
  the necessary SSC API endpoints.
fcli.ssc.session.login.usage.description.2 = %nFor interactive use, you may choose to keep the session \
  open until it expires. For CI/CD integrations and other automations, you should always issue a \
  logout command once work is complete. On shared/non-containerized systems, consider setting \
  FCLI_STATE_DIR or FCLI_DATA_DIR environment variables to prevent unexpected interactions between \
  different pipelines.
fcli.ssc.session.login.expire-in = Specify for how long the session should remain active, for example \
  1h (1 hour), 1d (1 day).
fcli.ssc.session.login.url.0 = SSC URL.
fcli.ssc.session.login.url.1 = Environment variables:%n \
  ${fcli.env.default.prefix}_SSC_URL: Shared with SC SAST/DAST%n \
  ${fcli.env.default.prefix}_SSC_SESSION_URL: Only SSC session commands 
fcli.ssc.session.login.token.0 = SSC token in either encoded (REST) or decoded (application) format. \
   Tokens can be created through the SSC web UI, or using the \
  'fcli ssc access-control create-token' command. Note that depending on token permissions, not all fcli \
  commands may be available.
fcli.ssc.session.login.token.1 = Environment variables:%n \
  ${fcli.env.default.prefix}_SSC_TOKEN
  
fcli.ssc.session.logout.usage.header = Terminate Fortify SSC session.
fcli.ssc.session.logout.usage.description = This command terminates an SSC session previously created \
  through the 'login' command. This command will try to revoke the token passed to or generated by the \
  'login' command (unless the --no-revoke-token option is specified), and removes the session data from \
  the fcli state data directory. 
fcli.ssc.session.logout.no-revoke-token = Don't revoke the token passed to or generated by the 'login' \
  command. If user name and password were specified during login, it is recommended to have the 'logout' \
  command revoke this token, to avoid exceeding SSCs maximum token limit. Note that due to SSC limitations, \
  user credentials will need to be provided to allow for token revocation. If a pre-generated token was \
  specified during login, usually you'll want to pass this option to avoid the pre-generated token from \
  being revoked.
  
fcli.ssc.session.list.usage.header = List active and expired Fortify SSC sessions.
fcli.ssc.session.list.usage.description.0 = This commands lists all SSC sessions created through the `login` \
  command, as long as they haven't been explicitly terminated through the 'logout' command. %n
fcli.ssc.session.list.usage.description.1 = For sessions created using user name and password, the output \
  of this command will show session expiry date and status, based on the data provided by SSC at the time \
  the login command was issued. Any changes to the generated token will not be reflected in the output of \
  this command. Even if a session is no longer valid because the generated token was revoked (through SSC \
  UI or 'fcli ssc access-control revoke-token' command), the output of this command may still show the session as not having \
  expired. Similarly, any changes to token validity will not be reflected in the output of this command. %n
fcli.ssc.session.list.usage.description.2 = For sessions created using a pre-generated token, fcli cannot \
  display session expiration date or status, as SSC doesn't allow for obtaining this information.

# fcli ssc rest
fcli.ssc.rest.usage.header = Interact with SSC REST API endpoints.
fcli.ssc.rest.usage.description = These commands allow for direct interaction with SSC REST API endpoints, \
  somewhat similar to using 'curl' but benefiting from standard fcli functionality like session management \
  (no need to manually specify Authorization header), rich output formatting options, and query functionality.
fcli.ssc.rest.call.usage.header = Call an individual Fortify SSC REST API endpoint. 
fcli.ssc.rest.call.no-paging = By default, this command will load all pages of data from SSC \
  (from the given offset if specified as a request parameter). Use this option to return only a \
  single page. 
fcli.ssc.rest.call.no-transform = By default, this command performs generic transformations on SSC REST \
  responses, like only outputting the actual response data (contents of the 'data' property). Use this \
  option to output the original response contents without transformations.
fcli.ssc.rest.call.transform = This option allows for performing custom transformations on the response \
  data based on a Spring Expression Language (SpEL) expression. For example, this allows for retrieving \
  data from sub-properties, or using project selection/projection. Note that the expression operates on \
  the raw response, as if --no-transform was specified before evaluating the expression.

# fcli ssc action
# Apart from the top-level usage header, which includes an SSC reference, all headers
# and descriptions are the same as for other action modules like FoD. When updating here,
# the same updates should be made in other modules.
fcli.ssc.action.usage.header = Manage SSC actions: data export, integration, automation & more.
fcli.ssc.action.get.usage.header = Get action contents.
fcli.ssc.action.help.usage.header = Show action usage help.
fcli.ssc.action.import.usage.header = (PREVIEW) Import one or more actions.
fcli.ssc.action.list.usage.header = List built-in and imported actions.
fcli.ssc.action.reset.usage.header = Remove all custom actions.
fcli.ssc.action.run.usage.header = Run an action.
fcli.ssc.action.sign.usage.header = Sign action.
fcli.ssc.action.run.confirm = Confirm running an action with invalid signature.
fcli.ssc.action.run.confirmPrompt = %s%nDo you still want to run this action?
fcli.ssc.action.sign.confirm = Confirm overwriting existing output file.
fcli.ssc.action.sign.confirmPrompt = Do you want overwrite existing output file %s?

fcli.action.source.single = The action can be specified as either a simple name or a local or \
  remote action YAML file location. If specified as a simple name, the action will be loaded from \
  the list of built-in and imported custom actions unless the `--from-zip` option is specified, \
  in which case the action will be loaded from the given local or remote zip file. The `--from-zip` \
  option will be ignored if the action is specified as a local or remote action YAML file location.
fcli.ssc.action.usage.description = Fcli supports workflow-style actions defined in YAML files. Many \
  built-in actions are provided, focusing on data export and CI/CD integration. Users can also develop \
  their own custom actions, either from scratch or by customizing built-in actions. Note though that \
  the ability to run custom actions is currently considered PREVIEW functionality; custom actions \
  developed for this fcli version may fail on other fcli versions. We will stabilize action syntax \
  over the next couple of fcli versions, and provide proper backward compatibility so that newer \
  fcli versions can run actions developed for older fcli versions. \
  %n%nActions can potentially perform dangerous operations like deleting data or posting data to 3rd-party \
  systems, so it is recommended to only run trusted actions. Action authors can sign their actions using \
  the `action sign` command; actions without a (valid) signature will require confirmation when trying to \
  run them. Trusted public keys can be configured through the `fcli config public-key` commands.
fcli.ssc.action.get.usage.description = This command allows for listing the YAML contents of built-in or \
  custom actions. This allows for reviewing the operations performed by an action, or for using the action \
  contents as a basis for developing custom actions. \
  %n%n${fcli.action.source.single}
fcli.ssc.action.help.usage.description = This command allows for showing the help information for the given \
  built-in or custom action. \
  ${fcli.action.source.single}
fcli.ssc.action.import.usage.description = Import one or more custom actions. You can import either a single \
  action YAML file, or a zip-file containing one or more action YAML files. Imported actions will take precedence \
  over built-in action if they have the same name. \
  %n%n${fcli.action.source.single}. \
  If only `--from-zip` is specified, all actions from that zip-file will be imported.
fcli.ssc.action.list.usage.description = By default, this command lists available built-in and \
  previously imported custom actions. If the `--from-zip` option is specified, this command \
  lists available actions from the given local or remote zip file instead.
fcli.ssc.action.run.usage.description = This command allows for running built-in or custom actions. As actions \
  may perform potentially dangerous operations like deleting data or posting data to 3rd-party systems, you should \
  only run trusted actions. For this reason, fcli requires confirmation when attempting to run an action without \
  a (valid) signature. \
  %n%n${fcli.action.source.single}
fcli.ssc.action.sign.usage.description = This command allows for signing custom actions, allowing those actions to \
  be run without confirmation if the corresponding public key has been imported through the `fcli config public-key` \
  commands. Contrary to other action commands, the action to be signed must be a local file. \
  %n%nThis command can use an existing private key for signing, or generate a new key pair if the \
  private key file as specified through the `--with` option doesn't yet exist and `--pubout` is \
  specified to output the corresponding public key. \
  %n%nPrivate keys may also be generated using OpenSSL or similar tools, but note that only RSA keys in PEM format are supported, \
  and only a small set of encryption schemes are supported for encrypted private keys. It is recommended to use AES \
  encryption, which is supported by both native fcli executables and the .jar version of fcli. The latter requires \
  Java 19 or above though to handle AES-encrypted private keys. Following is a sample OpenSSL command for generating an \
  encrypted private key that's supported by fcli for signing: %n  openssl genpkey -algorithm rsa -out private-key.pem -aes256 \
  %n%nFor convenience, when using a pre-existing private key, the `--pubout` option allows for outputting the corresponding \
  public key for use by the `fcli config public-key import` command. Note that public keys will not be automatically added \
  to the fcli trusted public key store; even if this command generates a key pair on the fly, you'll still need to import \
  the generated public key using the `fcli config public-key import` command.


# fcli ssc access-control
fcli.ssc.access-control.usage.header = Manage SSC users, roles & tokens.
fcli.ssc.access-control.create-role.usage.header = Create a role.
fcli.ssc.access-control.create-role.description = Role description.
fcli.ssc.access-control.create-role.universal-access = Set this role to have universal access to all SSC application versions.
fcli.ssc.access-control.create-role.permission-ids = Comma-separated list of permission id's to assign to this role.
fcli.ssc.access-control.delete-role.usage.header = Delete a role.
fcli.ssc.access-control.get-role.usage.header = Get role details.
fcli.ssc.access-control.list-roles.usage.header = List roles.
fcli.ssc.access-control.role.resolver.nameOrId = Role name or id.
fcli.ssc.access-control.role.name = Role name.
fcli.ssc.access-control.get-permission.usage.header = Get permission details.
fcli.ssc.access-control.list-permissions.usage.header = List permissions.
fcli.ssc.access-control.permission.resolver.nameOrId = Permission name or id.
# Re-usable command description for token commands.
fcli.ssc.access-control.token.usage.description = This command can be used either with an existing SSC session \
  (re-using SSC URL and other SSC connection settings), or without an existing session (in which case you'll \
  need to provide the SSC URL and any other relevant connection settings). SSC always requires user name and \
  password to be specified for token operations, hence you'll need to provide these even if you already \
  established an SSC session.  
fcli.ssc.access-control.create-token.usage.header = Create a token.
fcli.ssc.access-control.create-token.usage.description = ${fcli.ssc.access-control.token.usage.description}
fcli.ssc.access-control.create-token.expire-in = Expire token after the given time period, which is specified as \
  30m (30 minutes), 2h (2 hours), 1d (1 day).
fcli.ssc.access-control.create-token.description = Token description.
fcli.ssc.access-control.create-token.type = Token type, like CIToken, AnalysisUploadToken, ...
fcli.ssc.access-control.create-token.connect-timeout = Connection timeout for this command, for example 30s (30 seconds), 5m (5 minutes). Default value: ${default-connect-timeout}. 
fcli.ssc.access-control.create-token.socket-timeout = Socket timeout for this command, for example 30s (30 seconds), 5m (5 minutes). Default value: ${default-socket-timeout}.
fcli.ssc.access-control.list-tokens.usage.header = List tokens.
fcli.ssc.access-control.list-tokens.usage.description = ${fcli.ssc.access-control.token.usage.description}
fcli.ssc.access-control.list-tokens.connect-timeout = Connection timeout for this command, for example 30s (30 seconds), 5m (5 minutes). Default value: ${default-connect-timeout}. 
fcli.ssc.access-control.list-tokens.socket-timeout = Socket timeout for this command, for example 30s (30 seconds), 5m (5 minutes). Default value: ${default-socket-timeout}.
fcli.ssc.access-control.revoke-token.usage.header = Revoke a token.
fcli.ssc.access-control.revoke-token.usage.description = ${fcli.ssc.access-control.token.usage.description}
fcli.ssc.access-control.revoke-token.idsOrValues = Either one or more token id's, or one or more token values (comma-separated)
fcli.ssc.access-control.revoke-token.connect-timeout = Connection timeout for this command, for example 30s (30 seconds), 5m (5 minutes). Default value: ${default-connect-timeout}. 
fcli.ssc.access-control.revoke-token.socket-timeout = Socket timeout for this command, for example 30s (30 seconds), 5m (5 minutes). Default value: ${default-socket-timeout}.
fcli.ssc.access-control.update-token.usage.header = Update a token.
fcli.ssc.access-control.update-token.usage.description = ${fcli.ssc.access-control.token.usage.description}
fcli.ssc.access-control.update-token.token-id = Token id as shown by token create and list commands. Note that this \
  command does not accept the actual token value.
fcli.ssc.access-control.update-token.expire-in = Update token expiration period, specified as 30m (30 minutes), \
  2h (2 hours), 1d (1 day).
fcli.ssc.access-control.update-token.description = Update token description.
fcli.ssc.access-control.update-token.connect-timeout = Connection timeout for this command, for example 30s (30 seconds), 5m (5 minutes). Default value: ${default-connect-timeout}. 
fcli.ssc.access-control.update-token.socket-timeout = Socket timeout for this command, for example 30s (30 seconds), 5m (5 minutes). Default value: ${default-socket-timeout}.
fcli.ssc.access-control.list-token-definitions.usage.header = List token definitions.

fcli.ssc.access-control.create-local-user.usage.header = Create a local SSC User
fcli.ssc.access-control.create-local-user.email = The email of the user
fcli.ssc.access-control.create-local-user.firstname = The first name of the user
fcli.ssc.access-control.create-local-user.lastname = The last name of the user
fcli.ssc.access-control.create-local-user.password-never-expires = Causes the password of the user not to expire
fcli.ssc.access-control.create-local-user.require-password-change = Requires the password of the user to be changed
fcli.ssc.access-control.create-local-user.suspend = Causes the user to automatically be su
fcli.ssc.access-control.create-local-user.username = The username of the user
fcli.ssc.access-control.delete-user.usage.header = Delete a user.
fcli.ssc.access-control.get-user.usage.header = Get user details.
fcli.ssc.access-control.list-users.usage.header = List users.
fcli.ssc.access-control.list-appversion-users.usage.header = List users assigned to an application version.
fcli.ssc.access-control.appversion-auth-entity.add.specs = Assign one or more (comma-separated) users or LDAP groups to \
  the application version; accepts user id, entity name or email address. Option is repeatable.
fcli.ssc.access-control.appversion-auth-entity.rm.specs = Remove one or more (comma-separated) users or LDAP groups from \
  the application version; accepts user id, entity name or email address. Option is repeatable.
fcli.ssc.access-control.appversion-auth-entity.specs = One or more users or LDAP groups; accepts user id, entity name \
  or email address.
fcli.ssc.access-control.delete-users.spec = One or more users or LDAP groups to remove; accepts comma-separated \
  list of user id's, entity names or email addresses.
fcli.ssc.access-control.user.resolver.spec = User or LDAP group, accepting user id, entity name, or email address.


# fcli ssc alert
fcli.ssc.alert.usage.header = Manage SSC alerts & definitions.
fcli.ssc.alert.list.usage.header = List alerts.
fcli.ssc.alert.get-definition.usage.header = Get alert definition details.
fcli.ssc.alert.get-definition.id = Alert definition id.
fcli.ssc.alert.list-definitions.usage.header = List alert definitions.

# fcli ssc app
fcli.ssc.app.usage.header = Manage SSC applications.
fcli.ssc.app.delete.usage.header = Delete an application and all contained versions.
fcli.ssc.app.delete.confirm = Confirm deletion of all versions within the specified application.
fcli.ssc.app.get.usage.header = Get application details.
fcli.ssc.app.list.usage.header = List applications.
fcli.ssc.app.update.usage.header = Update an application.
fcli.ssc.app.update.name = New name for the application.
fcli.ssc.app.update.description = New description for the application.
fcli.ssc.app.resolver.nameOrId = Application name or id. Note that numeric values are always interpreted \
  as id's. If you have numeric application names, you will need to specify the application id.

# fcli ssc appversion
fcli.ssc.appversion.usage.header = Manage SSC application versions.
fcli.ssc.appversion.create.usage.header = Create an application version.
fcli.ssc.appversion.create.auto-required-attrs = Automatically set a default value for required application \
  version attributes.
fcli.ssc.appversion.create.description = Application version description.
fcli.ssc.appversion.create.active = Specify whether application version should be activated (true, default) \
  or not (false).
fcli.ssc.appversion.create.skip-if-exists = Skip application version creation if an application version with \
  the specified name already exists.
fcli.ssc.appversion.create.refresh = By default, this command will refresh the  source application version's metrics when copying from it. \
  Note that for large applications this can lead to an error if the timeout expires.
fcli.ssc.appversion.create.copy-options = Comma separated list of elements to copy (Requires --copy-from). By default, all are copied. \
  Allowed values: ${COMPLETION-CANDIDATES}.
fcli.ssc.appversion.delete.usage.header = Delete an application version.
fcli.ssc.appversion.copy-from.usage.header = Copy from options
fcli.ssc.appversion.copy-state.usage.header = (PREVIEW) Copy application version state.
fcli.ssc.appversion.copy-state.usage.description = Copy application version state from another application version. \nNote that this command may potentially have unintended side effects when copying state to application versions that already contain artifacts.
fcli.ssc.appversion.download-state.usage.header = Download application version state.
fcli.ssc.appversion.download-state.usage.description = Download application version state artifact. See 'fcli ssc artifact download' for downloading individual artifacts.
fcli.ssc.appversion.download-state.file = Optional output file path.
fcli.ssc.appversion.get.usage.header = Get application version details.
fcli.ssc.appversion.get.embed = Embed extra application version data. Allowed values: ${COMPLETION-CANDIDATES}.
fcli.ssc.appversion.list.usage.header = List application versions.
fcli.ssc.appversion.list.usage.description = By default, this command simply lists all application \
  versions. However, the --embed, --query and --output options allow for implementing advanced use cases. \
  Some examples: \
  %n%n List application versions created by user 'admin': \
  %n -q 'createdBy=="admin"' \
  %n%n List application versions requiring refresh: \
  %n -q 'refreshRequired' \
  %n%n List application versions with artifacts requiring approval: \
  %n -q 'currentState.attentionRequired' \
  %n%n List application versions with business risk 'High': \
  %n --embed attrValuesByGuid -q 'attrValuesByGuid["BusinessRisk"].contains("High")' \
  %n%n Generate script for purging all application versions: \
  %n -o 'expr=fcli ssc appversion purge-artifacts --older-than 30d {id}\\n'
fcli.ssc.appversion.list.embed = Embed extra application version data. Allowed values: ${COMPLETION-CANDIDATES}. \
  Using the --output option, this extra data can be included in the output. Using the --query option, \
  this extra data can be queried upon. To get an understanding of the structure and contents of the \
  embedded data, use the --output json or --output yaml options. 
fcli.ssc.appversion.purge-artifacts.usage.header = Purge application version artifacts.
fcli.ssc.appversion.purge-artifacts.usage.description = Purge all application version artifacts older than the specified date. See 'fcli ssc artifact purge' for purging individual artifacts. 
fcli.ssc.appversion.purge-artifacts.older-than = Purge artifacts older than the specified value, \
  in the format 30d (30 days), 1y (1 year).
fcli.ssc.appversion.refresh-metrics.usage.header = Refresh application version metrics.
fcli.ssc.appversion.refresh-metrics.usage.description = This command allows for refreshing SSC application \
  version metrics, similar to the little 'refresh' button shown on the SSC application version page \
  in case a refresh is required/pending.
fcli.ssc.appversion.update.usage.header = Update an application version.
fcli.ssc.appversion.update.name = Update application version name.
fcli.ssc.appversion.update.description = Update application version description.
fcli.ssc.appversion.resolver.name = Application and version name.
fcli.ssc.appversion.resolver.nameOrId = Application version id or <application>:<version> name.
fcli.ssc.appversion.resolver.copy-from.nameOrId = Copy FROM application version: \nid or <application>:<version> name.
fcli.ssc.appversion.resolver.copy-to.nameOrId = Copy TO application version: \nid or <application>:<version> name.

# fcli ssc artifact
fcli.ssc.artifact.usage.header = Manage SSC artifacts.
fcli.ssc.artifact.approve.usage.header = Approve an artifact.
fcli.ssc.artifact.approve.message = Approval message, default value '${DEFAULT-VALUE}'.
fcli.ssc.artifact.delete.usage.header = Delete an artifact.
fcli.ssc.artifact.download.usage.header = Download an artifact.
fcli.ssc.artifact.download.usage.description = Download an artifact by id. See 'fcli ssc appversion download-state' for downloading application state.
fcli.ssc.artifact.download.file = Optional output file path.
fcli.ssc.artifact.get.usage.header = Get artifact details.
fcli.ssc.artifact.get.id = Id of the artifact to be retrieved.
fcli.ssc.artifact.list.usage.header = List application version artifacts.
fcli.ssc.artifact.import-debricked.usage.header = Import results from Debricked as SSC \
  application version artifact.
fcli.ssc.artifact.import-debricked.debricked-url = Debricked URL. Default value: ${DEFAULT-VALUE}.
fcli.ssc.artifact.import-debricked.debricked-user = Debricked user name / email address.
fcli.ssc.artifact.import-debricked.debricked-password = Password for the given debricked user.
fcli.ssc.artifact.import-debricked.debricked-access-token = Debricked long-lived access token.
fcli.ssc.artifact.import-debricked.engine-type = SSC engine type. Default value: ${DEFAULT-VALUE}.
fcli.ssc.artifact.import-debricked.save-sbom-as = Save a copy of the SBOM file downloaded from \
  Debricked to the given file.
fcli.ssc.artifact.import-debricked.repository = Debricked repository name or id.
fcli.ssc.artifact.import-debricked.branch = Branch in the given repository for which to retrieve the SBOM.
fcli.ssc.artifact.import-debricked.insecure = Disable SSC checks when connecting to Debricked. 
fcli.ssc.artifact.import-debricked.connect-timeout = Debricked connection timeout, for example 30s (30 seconds), 5m (5 minutes). Default value: ${default-connect-timeout}. 
fcli.ssc.artifact.import-debricked.socket-timeout = Debricked socket timeout, for example 30s (30 seconds), 5m (5 minutes). Default value: ${default-socket-timeout}.  
fcli.ssc.artifact.upload.usage.header = Upload an artifact.
fcli.ssc.artifact.upload.engine-type = Engine type specifying which SSC parser plugin should be \
  used to process the uploaded artifact. This option should only be used for raw 3rd-party results, not for \
  standard Fortify (FPR) results or 3rd-party results in a zip-file accompanied by a scan.info file.
fcli.ssc.artifact.wait-for.usage.header = Wait for SSC artifact to reach or exit specified artifact statuses.
fcli.ssc.artifact.wait-for.usage.description.0 = Although this command offers a lot of options to \
  cover many different use cases, you can simply pass an artifact id (possibly stored using --store on the \
  'artifact upload' command) to wait for artifact processing completion. If any error state or unknown state \
  is detected, an exception will be thrown.
fcli.ssc.artifact.wait-for.usage.description.1 = %nThe following states are currently known by fcli:
fcli.ssc.artifact.wait-for.usage.description.2 = ${fcli.ssc.artifact.states:-See fcli help output}
fcli.ssc.artifact.wait-for.until=Wait until either any or all artifacts match. If neither --until or --while are specified, default is to wait until all artifacts match.
fcli.ssc.artifact.wait-for.while=Wait while either any or all artifacts match.
fcli.ssc.artifact.wait-for.any-state=One or more processing states against which to match the given artifacts.
fcli.ssc.artifact.purge.usage.header = Purge an artifact.
fcli.ssc.artifact.purge.usage.description = Purge an individual artifact by id. See 'fcli ssc appversion purge-artifacts' for purging multiple artifacts by date. 
fcli.ssc.artifact.resolver.id = Artifact id.
fcli.ssc.artifact.resolver.ids = One or more artifact id's.
fcli.ssc.artifact.upload.file = File to upload.

# fcli ssc attribute
fcli.ssc.attribute.usage.header = Manage SSC application version attributes & definitions.
fcli.ssc.attribute.list.usage.header = List application version attributes.
fcli.ssc.attribute.update.usage.header = Update application version attributes. 
fcli.ssc.attribute.update.option = Example: ATTR1=[VAL1;VAL2],CATEGORY:ATTR2=VAL3 \
  \nSet values for one or more attributes. This option accepts a comma-separated list of KEY=VALUE assignments. \
  \nEach KEY accepts either the Attribute's GUID or its Name with the optional Category (InfoClassification or "BUSINESS:Data Classification" or "Data Classification") \
  \nEach VALUE accepts a semicolon-separated list of Attribute's Values, encapsulated in brackets (optional for single value) \
  
fcli.ssc.attribute.get-definition.usage.header = Get attribute definition details.
fcli.ssc.attribute.list-definitions.usage.header = List attribute definitions.
fcli.ssc.attribute-definition.resolver.nameOrId = Attribute definition name or id.

# fcli ssc issue
fcli.ssc.issue.usage.header = Manage SSC issues (vulnerabilities) and related entities like issue templates, filters and groups.
fcli.ssc.issue.count.usage.header = Count application version vulnerabilities by grouping.
fcli.ssc.issue.count.by = Vulnerability grouping type. See 'fcli ssc issue list-groups' for \
  allowed values. Default value: ${DEFAULT-VALUE}.
fcli.ssc.issue.count.filter = Filter issue counts using the given (friendly or technical) filter. \
  See 'fcli ssc issue list-filters' for allowed values.
fcli.ssc.issue.list.usage.header = List application version vulnerabilities.
fcli.ssc.issue.list.filter = Filter issues using the given (friendly or technical) filter. \
  See 'fcli ssc issue list-filters' for allowed values.
fcli.ssc.issue.list.embed = Embed extra application version data. Allowed values: ${COMPLETION-CANDIDATES}. \
  Using the --output option, this extra data can be included in the output. Using the --query option, \
  this extra data can be queried upon. To get an understanding of the structure and contents of the \
  embedded data, use the --output json or --output yaml options.
fcli.ssc.issue.get-filter.usage.header = Get issue filter details.
fcli.ssc.issue.filter = Technical or friendly filter as returned by the 'fcli ssc issue list-filters' command.
fcli.ssc.issue.list-filters.usage.header = List application version issue filters.
fcli.ssc.issue.get-filterset.usage.header = Get filter set details.
fcli.ssc.issue.list-filtersets.usage.header = List application version filter sets.
fcli.ssc.issue.filterset.resolver.titleOrId = Filter set title (name) or id.
fcli.ssc.issue.get-group.usage.header = Get issue group details.
fcli.ssc.issue.list-groups.usage.header = List application version issue groups.
fcli.ssc.issue.group.resolver.displayNameOrId = Issue group display name or id.
fcli.ssc.issue.create-template.usage.header = Create/upload an issue template.
fcli.ssc.issue.create-template.issue-template-file = File containing the issue template definition.
fcli.ssc.issue.create-template.description = Issue template description.
fcli.ssc.issue.create-template.file = Issue template file path.
fcli.ssc.issue.create-template.name = Issue template name.
fcli.ssc.issue.create-template.set-as-default = Set this issue template as the default issue template.
fcli.ssc.issue.delete-template.usage.header = Delete an issue template.
fcli.ssc.issue.download-template.usage.header = Download an issue template.
fcli.ssc.issue.download-template.file = Optional issue template file path.
fcli.ssc.issue.get-template.usage.header = Get issue template details.
fcli.ssc.issue.list-templates.usage.header = List issue templates.
fcli.ssc.issue.update-template.usage.header = Update an issue template.
fcli.ssc.issue.update-template.name = Update issue template name.
fcli.ssc.issue.update-template.description = Update issue template description.
fcli.ssc.issue.update-template.set-as-default = Set this issue template as the default issue template. 
fcli.ssc.issue.template.resolver.nameOrId = Issue template name or id.
fcli.ssc.issue.check.usage.header = (PREVIEW) Check issue count.

# fcli ssc performance-indicator
fcli.ssc.performance-indicator.usage.header = (PREVIEW) Manage SSC performance indicators & definitions.
fcli.ssc.performance-indicator.usage.description = Performance indicator and variable commands may potentially \
  be combined under a single 'metrics' entity, we're still considering the pro's and con's of either approach.
fcli.ssc.performance-indicator.list-definitions.usage.header = (PREVIEW) List performance indicator definitions.
fcli.ssc.performance-indicator.get.usage.header = (PREVIEW) Get performance indicator details.
fcli.ssc.performance-indicator.list.usage.header = (PREVIEW) List application version performance indicators.
fcli.ssc.performance-indicator.resolver.nameOrIdOrGuid = Performance indicator name, id, or guid.

# fcli ssc variable
fcli.ssc.variable.usage.header = (PREVIEW) Manage SSC variables & definitions.
fcli.ssc.variable.usage.description = Performance indicator and variable commands may potentially \
  be combined under a single 'metrics' entity, we're still considering the pro's and con's of either approach.
fcli.ssc.variable.list-definitions.usage.header = (PREVIEW) List variable definitions.
fcli.ssc.variable.get.usage.header = (PREVIEW) Get variable details.
fcli.ssc.variable.list.usage.header = (PREVIEW) List application version variables.
fcli.ssc.variable.resolver.nameOrIdOrGuid = Variable name, id, or guid.

# SSC plugins
fcli.ssc.plugin.usage.header = Manage SSC parser & bug tracker plugins.
fcli.ssc.plugin.disable.usage.header = Disable a plugin.
fcli.ssc.plugin.enable.usage.header = Enable a plugin.
fcli.ssc.plugin.get.usage.header = Get plugin details.
fcli.ssc.plugin.install.usage.header = Install a plugin.
fcli.ssc.plugin.install.file = Plugin jar file to install.
fcli.ssc.plugin.install.no-auto-enable = The plugin being installed will be enabled automatically, \
  unless the --no-auto-enable option is provided.
fcli.ssc.plugin.list.usage.header = List plugins.
fcli.ssc.plugin.uninstall.usage.header = Uninstall a plugin.
fcli.ssc.plugin.uninstall.no-auto-disable = The plugin being deleted will be automatically disabled, \
  unless the --no-auto-disable option is provided.
 fcli.ssc.plugin.resolver.numericId = Numeric plugin id.

# fcli ssc report
fcli.ssc.report.usage.header = Manage SSC reports & templates.
fcli.ssc.report.create.usage.header = Generate a report on SSC.
fcli.ssc.report.create.format = Report format. Allowed values: ${COMPLETION-CANDIDATES}.
fcli.ssc.report.create.name = Name for the generated report.
fcli.ssc.report.create.notes = Notes for the generated report.
fcli.ssc.report.create.parameters = Report generation parameters, dependent on report template.
fcli.ssc.report.delete.usage.header = Delete a report from SSC.
fcli.ssc.report.download.usage.header = Download an SSC report.
fcli.ssc.report.download.file = Optional output file name.
fcli.ssc.report.get.usage.header = Get SSC report details.
fcli.ssc.report.list.usage.header = List SSC reports.
fcli.ssc.report.wait-for.usage.header = Wait for SSC report generation.
fcli.ssc.report.wait-for.until = Wait until either any or all reports match. If neither --until or --while are specified, default is to wait until all reports match.
fcli.ssc.report.wait-for.while = Wait while either any or all reports match.
fcli.ssc.report.wait-for.any-state = One or more report states against which to match the given reports.
fcli.ssc.report.list-parameters.usage.header = List SSC report parameters.
fcli.ssc.report.create-template.usage.header = Create/upload a report template.
fcli.ssc.report.create-template.config = File containing report template configuration, like report \
  parameters. You can use the 'generate-config' command to create a new configuration file template.
fcli.ssc.report.create-template.template = BIRT report template to be uploaded to SSC.
fcli.ssc.report.create-template-config.usage.header = Generate a sample report template configuration file.
fcli.ssc.report.create-template-config.usage.description = Generate a sample report template configuration \
  file for use by the 'create' command. This configuration file defines settings like the name of the report \
  template, what parameters it accepts, and the types for those parameters. 
fcli.ssc.report.create-template-config.config = Output file for the generated configuration.
fcli.ssc.report.create-template-config.confirm = Confirm overwriting existing configuration file.
fcli.ssc.report.delete-template.usage.header = Delete a report template.
fcli.ssc.report.download-template.usage.header = Download a report template file.
fcli.ssc.report.download-template.file = Optional issue template file path.
fcli.ssc.report.get-template.usage.header = Get report template details.
fcli.ssc.report.list-templates.usage.header = List report template definitions.
fcli.ssc.report.output.header.authEntityUserName = Generated by
reportTemplateNameOrId = The name or ID of the report template definition.
fcli.ssc.report.resolver.name-or-ids = Report names or id's.
reportNameOrId = Report name or id. If multiple reports with the same name exist on SSC, you must specify the report id.
 

# fcli ssc system-state
fcli.ssc.system-state.usage.header = View & manage SSC system state (logs, jobs, ...)
fcli.ssc.system-state.list-activities.usage.header = List activity feed entries.
fcli.ssc.system-state.list-events.usage.header = List system events.
fcli.ssc.system-state.list-settings.usage.header = List system settings.
fcli.ssc.system-state.list-rulepacks.usage.header = List installed rule packs.
fcli.ssc.system-state.cancel-job.usage.header = Cancel a job.
fcli.ssc.system-state.get-job.usage.header = Get job details.
fcli.ssc.system-state.list-jobs.usage.header = List jobs.
fcli.ssc.system-state.update-job.usage.header = Update job priority.
fcli.ssc.system-state.update-job.priority = New priority for this job.
fcli.ssc.system-state.upload-seed-bundle.usage.header = Upload a seed bundle.
fcli.ssc.system-state.upload-seed-bundle.file = Seed bundle to upload.
fcli.ssc.system-state.job.resolver.name = Job name.
fcli.ssc.system-state.job.resolver.names = One or more job names
fcli.ssc.system-state.wait-for-job.usage.header = Wait for multiple system jobs
fcli.ssc.system-state.wait-for-job.until=Wait until either any or all jobs match. If neither --until or --while are specified, default is to wait until all jobs match.
fcli.ssc.system-state.wait-for-job.while=Wait while either any or all jobs match.
fcli.ssc.system-state.wait-for-job.any-state=One or more processing states against which to match the given jobs.

#################################################################################################################
# The following are technical properties that shouldn't be internationalized ####################################
#################################################################################################################

# Property default values that are usually set when running fcli, but which may not be available when 
# generating AsciiDoc man-pages.
fcli.env.default.prefix=FCLI_DEFAULT

# Table output columns configuration
fcli.ssc.action.output.table.options = name,customString,signatureString,usage.header
fcli.ssc.action.import.output.table.options = name,customString,signatureString
fcli.ssc.action.sign.output.table.options = in,out,publicKeyFingerprint
fcli.ssc.access-control.role.output.table.options = id,name,builtIn,allApplicationRole
fcli.ssc.access-control.permission.output.table.options = id,name
fcli.ssc.access-control.token.output.table.options = id,username,type,creationDate,terminalDate,timeRemaining 
fcli.ssc.access-control.create-token.output.table.options = id,username,type,restToken,applicationToken,terminalDate,timeRemaining
fcli.ssc.access-control.revoke-token.output.table.options = responseCode
fcli.ssc.access-control.token-definition.output.table.options = type,maxDaysToLive,maxUsages,capabilityDescription
fcli.ssc.access-control.user.output.table.options = id,entityName,displayName,type,email,isLdap
fcli.ssc.access-control.appversion-user.output.table.options = id,entityName,displayName,type,email,isLdap
fcli.ssc.alert.output.table.options = id,triggeredDate,alertDefinitionName,userName,alertMessage,applicationAndVersionLabel
fcli.ssc.alert.definition.output.table.options = id,name,createdBy,recipientType,monitoredEntityType,triggerDescriptionName
fcli.ssc.app.output.table.options = id,name
fcli.ssc.app.delete.output.table.options = id,application.name,name,createdBy,action
fcli.ssc.appversion.output.table.options = id,application.name,name,issueTemplateName,createdBy
fcli.ssc.appversion.copy-state.output.table.options = previousProjectVersionId,projectVersionId
# TODO Add scanTypes property using recordTransformer in command implementation
fcli.ssc.artifact.output.table.options = id,scanTypes,lastScanDate,uploadDate,status
fcli.ssc.attribute.output.table.options = id,category,guid,name,valueString
fcli.ssc.attribute.definition.output.table.options = id,category,guid,name,type,required
fcli.ssc.issue.count.output.table.options = cleanName,totalCount,auditedCount
fcli.ssc.issue.list.output.table.options = id,primaryLocation,lineNumber,issueName
fcli.ssc.issue.filter-set.output.table.options = guid,title,defaultFilterSet
fcli.ssc.issue.group.output.table.options = guid,displayName,entityType
fcli.ssc.issue.filter.output.table.options = entityType,friendlyFilter,technicalFilter
fcli.ssc.issue.template.output.table.options = id,name,inUse,defaultTemplate,publishVersion,originalFileName
fcli.ssc.issue.check.output.table.options = result
fcli.ssc.performance-indicator.definition.output.table.options = id,guid,name,equation,range
fcli.ssc.performance-indicator.output.table.options = id,name,timestamp,valueString
fcli.ssc.variable.definition.output.table.options = id,guid,name,searchString
fcli.ssc.variable.output.table.options = id,name,timestamp,value
fcli.ssc.plugin.output.table.options = id,pluginId,pluginType,pluginName,pluginVersion,pluginState
fcli.ssc.report.output.table.options = id,name,template.name,type,finishDate,authEntity.userName,status
fcli.ssc.report.parameter.output.table.options = identifier,name,typeString,optionsString
fcli.ssc.report.template.output.table.options = id,name,type,templateDocId,inUse
fcli.ssc.report.template.create-template-config.output.table.options = path
# TODO Rename allApplicationRole to universalAccess in command implementation
fcli.ssc.session.output.table.options = name,type,url,created,expires,expired
fcli.ssc.system-state.activity.output.table.options = eventDate,userName,eventType,detailedNote,applicationVersionId,entityId
fcli.ssc.system-state.event.output.table.options = eventDate,userName,eventType,detailedNote,applicationVersionId,entityId
fcli.ssc.system-state.job.output.table.options = jobName,jobGroup,jobClass,state,cancellable,priority,createTime,startTime,finishTime
fcli.ssc.system-state.seed-bundle.output.table.options = responseCode
fcli.ssc.system-state.settings.output.table.options = group,name,value
fcli.ssc.system-state.rulepack.output.table.options = rulepackGUID,name,version

