# yaml-language-server: $schema=https://fortify.github.io/fcli/schemas/action/fcli-action-schema-1.0.json

usage:
  header: Generate a GitLab DAST report listing SSC DAST vulnerabilities. 
  description: |
    For information on how to import this report into GitLab, see 
    https://docs.gitlab.com/ee/ci/yaml/artifacts_reports.html#artifactsreportsdast
  
defaults:
  requestTarget: ssc
  
parameters:
  - name: file
    cliAliases: f
    description: "Optional output file name (or 'stdout' / 'stderr'). Default value: gl-fortify-dast.json"
    required: false
    defaultValue: gl-fortify-dast.json
  - name: appversion
    cliAliases: av
    description: "Required application version id or <appName>:<versionName>"
    type: appversion_single
  - name: filterset
    cliAliases: fs
    description: "Filter set name or guid from which to load issue data. Default value: Default filter set for given application version"
    required: false
    type: filterset
  - name: page-size
    description: "Number of vulnerabilities to retrieve at a time. Higher numbers may reduce time required to build the report, at the cost of increased memory usage (on both fcli and SSC), and could potentially negatively affect overall SSC performance or result in read time-outs (see --socket-timeout option on fcli ssc session login command). Default value: 100"
    required: false
    defaultValue: "100"
  
steps:
  - progress: Loading latest dynamic scan
  - requests:
    - name: artifacts
      uri:  /api/v1/projectVersions/${parameters.appversion.id}/artifacts
      type: paged
      query:
        embed: scans
      forEach:
        name: artifact
        breakIf: ${lastDynamicScan!=null}
        do:
          - set:
            - name: lastDynamicScan
              value: ${artifact._embed.scans?.^[type=='WEBINSPECT']}
  - progress: Processing issue data
  - requests:
    - name: issues
      uri: /api/v1/projectVersions/${parameters.appversion.id}/issues
      query:
        filter: ISSUE[11111111-1111-1111-1111-111111111151]:WEBINSPECT
        filterset: ${parameters.filterset.guid}
        limit: ${parameters['page-size']}
      pagingProgress:
        postPageProcess: Processed ${totalIssueCount?:0} of ${issues_raw.count} issues
      forEach:
        name: issue
        embed:
          - name: details
            uri: /api/v1/issueDetails/${issue.id}
        do:
          - append:
            - name: vulnerabilities
              valueTemplate: vulnerabilities
  - write:
    - to: ${parameters.file}
      valueTemplate: gitlab-dast-report
    - if: ${parameters.file!='stdout'}
      to: stdout
      value: |
        Output written to ${parameters.file}

valueTemplates:
  - name: gitlab-dast-report
    contents:
      schema: https://gitlab.com/gitlab-org/security-products/security-report-schemas/-/raw/v15.0.0/dist/dast-report-format.json
      version: 15.0.0
      scan:
        start_time: ${#formatDateTime("yyyy-MM-dd'T'HH:mm:ss", lastDynamicScan?.uploadDate?:'1970-01-01T00:00:00')}
        end_time: ${#formatDateTime("yyyy-MM-dd'T'HH:mm:ss", lastDynamicScan?.uploadDate?:'1970-01-01T00:00:00')}
        status: success
        type: dast
        analyzer:
          id: fortify-webinspect
          name: Fortify WebInspect
          url: https://www.microfocus.com/en-us/products/application-security-testing/overview
          version: WebInspect ${lastDynamicScan?.engineVersion?:'version unknown'}
          vendor:
            name: Fortify
        scanner:
          id: fortify-webinspect
          name: Fortify WebInspect
          url: https://www.microfocus.com/en-us/products/application-security-testing/overview
          version: WebInspect ${lastDynamicScan?.engineVersion?:'version unknown'}
          vendor: 
            name: Fortify
        scanned_resources: ${{}}
#        scanned_resources: |-
#          ${ 
#            release.siteTree==null ? {}
#              : release.siteTree.![{
#                method: method,
#                url: scheme+'://'+host+':'+port+path,
#                type: 'url' 
#              }] 
#          ] 
      vulnerabilities: ${vulnerabilities?:{}}
      # remediations: ... 
     
  - name: vulnerabilities
    contents:
      id: ${issue.issueInstanceId}
      category: sast
      name: ${issue.issueName}
      message: ${issue.issueName}
      description: ${#abbreviate(#htmlToText(issue.details?.brief), 15000)}
      cve: 'N/A'
      severity: ${issue.friority}
      confidence: ${(issue.friority matches "(Critical|Medium)") ? "High":"Low" }
      solution: ${#abbreviate(#htmlToText(issue.details?.brief)+'\n\n'+#htmlToText(issue.details?.recommendation), 7000)}
      scanner:
        id: fortify-webinspect
        name: Fortify WebInspect
      identifiers:
        - name:  "Instance id: ${issue.issueInstanceId}"
          type:  issueInstanceId
          value: ${issue.issueInstanceId}
          url:   ${#ssc.issueBrowserUrl(issue,parameters.filterset)}
      links:
        - name: Additional issue details, including analysis trace, in Software Security Center
          url:  ${#ssc.issueBrowserUrl(issue,parameters.filterset)}
        - name: SecureCodeWarrior Training
          url:  ${issue.details?.appSecTrainingUrl}
      # evidence: # TODO
      #   source:
      #     id:
      #     name:
      #     url:
      #   summary:
      #   request:
      #     headers:
      #       - name:
      #         value:
      #     method:
      #     url:
      #     body:
      #   response:
      #     headers:
      #       - name:
      #         value:
      #     reason_phrase: OK|Internal Server Error|...
      #     status_code: 200|500|...
      #     body:
      #   supporting_messages:
      #     - name:
      #       request: ...
      #       response: ...
      location:
        hostname: ${#uriPart(issue.details.url, 'serverUrl')?:''}
        method: ${issue.details.method?:''}
        param: ${issue.details.attackPayload?:''}
        path: ${#uriPart(issue.details.url, 'path')?:''}
      # assets:
      #   - type: http_session|postman
      #     name: 
      #     url: link to asset in build artifacts
      # discovered_at: 2020-01-28T03:26:02.956