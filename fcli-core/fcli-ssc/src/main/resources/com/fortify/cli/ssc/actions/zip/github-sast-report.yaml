# For now, github-sast-report and sarif-sast-report actions are exactly the same, apart from the
# following:
# - Different usage information
# - Different default Optional output file name 
# - The sarif-report doesn't impose a limit of 1000 issues
# The reason for having two similar but separate actions is two-fold:
# - We want to explicitly show that fcli supports both GitHub Code Scanning integration (which 
#   just happens to be based on SARIF) and generic SARIF capabilities.
# - Potentially, outputs for GitHub and generic SARIF may deviate in the future, for example if 
#   we want to add SARIF properties that are not supported by GitHub.
# Until the latter situation arises, we should make sure though that both actions stay in sync;
# when updating one, the other should also be updated. and ideally we should have functional tests
# that compare the outputs of both actions. 

schemaVersion: '1.0'

usage:
  header: Generate a GitHub Code Scanning report listing SSC SAST vulnerabilities.  
  description: |
    For information on how to import this report into GitHub, see 
    https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github

defaults:
  requestTarget: ssc
  
parameters:
  - name: file
    cliAliases: f
    description: "Optional output file name (or 'stdout' / 'stderr'). Default value: gh-fortify-sast.sarif"
    required: false
    defaultValue: gh-fortify-sast.sarif
  - name: appversion
    cliAliases: av
    description: "Required application version id or <appName>:<versionName>"
    type: appversion_single
  - name: filterset
    cliAliases: fs
    description: "Filter set name or guid from which to load issue data. Default value: Default filter set for given application version"
    required: false
    type: filterset
  - name: page-size
    description: "Number of vulnerabilities to retrieve at a time. Higher numbers may reduce time required to build the report, at the cost of increased memory usage (on both fcli and SSC), and could potentially negatively affect overall SSC performance or result in read time-outs (see --socket-timeout option on fcli ssc session login command). Default value: 100"
    required: false
    defaultValue: "100"
  
steps:
  - progress: Loading latest static scan
  - requests:
    - name: artifacts
      uri:  /api/v1/projectVersions/${parameters.appversion.id}/artifacts
      type: paged
      query:
        embed: scans
      forEach:
        name: artifact
        breakIf: ${lastStaticScan!=null}
        do:
          - set:
            - name: lastStaticScan
              value: ${artifact._embed.scans?.^[type=='SCA']}
  - progress: Processing issue data
  - requests:
    - name: issues
      uri: /api/v1/projectVersions/${parameters.appversion.id}/issues
      query:
        filter: ISSUE[11111111-1111-1111-1111-111111111151]:SCA
        filterset: ${parameters.filterset.guid}
        limit: ${parameters['page-size']}
      pagingProgress:
        postPageProcess: Processed ${totalIssueCount?:0} of ${issues_raw.count} issues
      onResponse:
        - if: ${issues_raw.count>1000}
          throw: GitHub does not support importing more than 1000 vulnerabilities. Please clean the scan results or update vulnerability search criteria.
      forEach:
        name: issue
        embed:
          - name: details
            uri: /api/v1/issueDetails/${issue.id}
        do:
          - append:
            - name: ruleCategories
              property: ${issue.primaryRuleGuid}
              value: ${issue.issueName}
            - name: results
              valueTemplate: results
  - progress: Processing rule data
  - forEach:
      processor: ${#ssc.ruleDescriptionsProcessor(parameters.appversion.id)}
      name: rule
      do:
        - append:
          - if: ${#isNotBlank(ruleCategories[rule.id])}
            name: rules
            valueTemplate: rules
  - write:
    - to: ${parameters.file}
      valueTemplate: github-sast-report
    - if: ${parameters.file!='stdout'}
      to: stdout
      value: |
        Output written to ${parameters.file}

valueTemplates:
  - name: github-sast-report
    contents:
      "$schema": https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json 
      version: '2.1.0'
      runs:
        - tool:
            driver:
              name: 'Fortify SCA'   
              version: ${lastStaticScan?.engineVersion?:'unknown'}
              rules: ${rules?:{}}
              properties:
                copyright: ${#copyright()}
                applicationName: ${parameters.appversion.project.name}
                applicationId: ${parameters.appversion.project.id}
                versionName: ${parameters.appversion.name}
                versionId: ${parameters.appversion.id}
          results: ${results?:{}} 
     
  - name: rules
    contents:
      id: ${rule.id}
      shortDescription:
        text: ${ruleCategories[rule.id]}
      fullDescription:
        text: |
          ## ${ruleCategories[rule.id]}
          
          ${rule.abstract}
      help:
        text: |
          ${rule.explanation?:'No explanation available'}
          
          ## Recommendations
          
          ${rule.recommendations?:'Not available'}
          
          ## Tips
          
          ${#join('\n\n', rule.tips)?:'Not available'}
          
          ## References
          
          ${#numberedList(rule.references.![title
            +(#isNotBlank(publisher)?", "+publisher:"")
            +(#isNotBlank(author)?", "+author:"")
            +(#isNotBlank(source)?", "+source:"")])?:'Not available'}
            
          ${#copyright()}
        
  - name: results
    contents:
      ruleId: ${issue.primaryRuleGuid}
      message: 
        text: ${issue.details?.brief} [More information](${#ssc.issueBrowserUrl(issue,parameters.filterset)})
      level: ${(issue.friority matches "(Critical|High)") ? "warning":"note" }
      partialFingerprints:
        issueInstanceId: ${issue.issueInstanceId}
      locations:
        - physicalLocation:
            artifactLocation:
              uri: ${issue.fullFileName}
            region:
              startLine: ${issue.lineNumber==0||issue.lineNumber==null?1:issue.lineNumber}
              endLine: ${issue.lineNumber==0||issue.lineNumber==null?1:issue.lineNumber}
              startColumn: ${1}  # Needs to be specified as an expression in order to end up as integer instead of string in JSON
              endColumn: ${80}
      codeFlows: |-
        ${ 
          issue.details?.traceNodes==null ? {}
            : 
            {{ 
                threadFlows: issue.details?.traceNodes.![{
                  locations: #this.![{
                    location: {
                        message: {
                            text: text
                        },
                        physicalLocation: {
                            artifactLocation: {
                                uri: fullPath
                            },
                            region: {
                                startLine: line==0||line==null?1:line
                            }
                        }
                    }
                  }] 
                }] 
            }} 
        }