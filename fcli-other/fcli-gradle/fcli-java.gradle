apply plugin: "java"
apply plugin: "io.freefair.lombok"

// Define Java version
java {
	sourceCompatibility = JavaVersion.toVersion("17")
	targetCompatibility = JavaVersion.toVersion("17")
}

dependencies {
	implementation platform(project("${fcliBomRef}"))
	annotationProcessor platform(project("${fcliBomRef}"))
	
	// Picocli dependency & annotation processor
	// TODO Re-enable when removing patched picocli classes from fcli-common
	//implementation("info.picocli:picocli")
	annotationProcessor("info.picocli:picocli-codegen")
	
	// Generate GraalVM reflect-config.json using annotations
	compileOnly('com.formkiq:graalvm-annotations')
	annotationProcessor('com.formkiq:graalvm-annotations-processor')

	// REST client
	implementation('com.konghq:unirest-java') {
		exclude group: 'com.google.code.gson', module: 'gson' // We use Jackson, so no need for Gson
		exclude group: 'commons-logging', module: 'commons-logging' // We use jcl-over-slf4j
	}
	implementation('com.konghq:unirest-objectmapper-jackson')
	
	// Spring expression language (SpEL)
	implementation('org.springframework:spring-expression')
    // Support for JSON/SpEL date/time formatting
    implementation('org.springframework:spring-context')
        
	// Remove annotation processor warning
	compileOnly('com.google.code.findbugs:jsr305')
	
    // Logging dependencies
	implementation('org.slf4j:slf4j-api')
	implementation('org.slf4j:jcl-over-slf4j')
	implementation('ch.qos.logback:logback-classic')

	// Jackson data formats & types
	implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-yaml')
	implementation('com.fasterxml.jackson.dataformat:jackson-dataformat-csv')
	implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml")
	implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
	
	// Output formatting
	implementation('hu.webarticum:tree-printer')
	implementation('com.github.freva:ascii-table')
	
	// Encryption library
	implementation('org.jasypt:jasypt')
	
	// Test dependencies
	testImplementation 'org.junit.jupiter:junit-jupiter-api'
	testImplementation 'org.junit.jupiter:junit-jupiter-params'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	//required for unpacking tar.gz (debricked cli)
	implementation('org.apache.commons:commons-compress')
}
    
compileJava {
	// Enable verbose logging for picocli annotation processor
	// The reflect-config.json generated by the picocli annotation processor
	// is lacking many entries, hence we disable this functionality here and
	// use a separate generatePicocliReflectConfig task to generate a proper 
	// reflect-config.json file. 
	options.compilerArgs += ["-Averbose=true","-Adisable.reflect.config=true"]
}
    
test {
	useJUnitPlatform()
	// Show test output in Gradle output, sometimes easier than opening the
	// test reports in a browser
	testLogging {
		showStandardStreams = true
	}
}
    
// Generate resource-config.json
ext.generatedResourceConfigDir = "${buildDir}/generated-resource-config"
tasks.register('generateResourceConfig') {
	doLast {
		def outputDir = "${generatedResourceConfigDir}/META-INF/native-image/fcli-generated/${project.name}";
		mkdir "${outputDir}"
		def entries = [];
		fileTree(dir: 'src/main/resources', excludes: ['**/i18n/**', 'META-INF/**'])
			.visit {e -> if ( !e.isDirectory() ) {entries << '\n  {"pattern":"'+e.relativePath+'"}'}};
		if ( entries.size>0 ) {
			def contents = '{"resources":[' + entries.join(",") + '\n]}';
			file("${outputDir}/resource-config.json").text = contents;
			println contents
		}
	}
}
sourceSets.main.output.dir generatedResourceConfigDir, builtBy: generateResourceConfig