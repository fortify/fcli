/**
 * Copyright 2023 Open Text.
 *
 * The only warranties for products and services of Open Text 
 * and its affiliates and licensors ("Open Text") are as may 
 * be set forth in the express warranty statements accompanying 
 * such products and services. Nothing herein should be construed 
 * as constituting an additional warranty. Open Text shall not be 
 * liable for technical or editorial errors or omissions contained 
 * herein. The information contained herein is subject to change 
 * without notice.
 */
package com.fortify.cli.ftest.ssc

import static com.fortify.cli.ftest._common.spec.FcliSession.FcliSessionType.SSC

import com.fortify.cli.ftest._common.Fcli
import com.fortify.cli.ftest._common.spec.FcliBaseSpec
import com.fortify.cli.ftest._common.spec.FcliSession
import com.fortify.cli.ftest._common.spec.Prefix

import spock.lang.AutoCleanup
import spock.lang.Requires
import spock.lang.Shared
import spock.lang.Stepwise

@Prefix("ssc.token") @FcliSession(SSC) @Stepwise
@Requires({System.getProperty('ft.ssc.user') && System.getProperty('ft.ssc.password')})
class SSCAccessControlTokenSpec extends FcliBaseSpec {
    String user = System.getProperty('ft.ssc.user');
    String pass = System.getProperty('ft.ssc.password');
    
    
    def "create"() {
        def args = "ssc ac create-token CIToken --expire-in='5m' --user=$user --password=$pass --store token -o table=id,username,type,restToken,applicationToken,terminalDate,timeRemaining,description"
        when:
            def result = Fcli.run(args)
        then:
            verifyAll(result.stdout) { 
                size()==2
                it[0].replace(' ', '').equals("IdUsernameTypeResttokenApplicationtokenTerminaldateTimeremainingDescription")
                it[1].endsWith("Generated by 'fcli ssc token create' command ");
            }
    }
    
    def "verifyCreated"() {
        def args = "ssc ac list-tokens -q id==#var('token').id --user=$user --password=$pass -o table=id,username,type,creationDate,terminalDate,timeRemaining,description"
        when:
            def result = Fcli.run(args)
        then:
            verifyAll(result.stdout) { 
                size()==2
                it[0].replace(' ', '').equals("IdUsernameTypeCreationdateTerminaldateTimeremainingDescription")
                it[1].endsWith("Generated by 'fcli ssc token create' command ");
            }
    }

    def "update"() {
        def args = "ssc ac update-token --description=updatedDescription --user=$user --password=$pass ::token::id -o table=id,description"
        when:
            def result = Fcli.run(args)
        then:
            verifyAll(result.stdout) {
                size()==2
                it[0].replace(' ', '').equals("IdDescription")
                it[1].endsWith("updatedDescription ");
            }
    }
    
    def "verifyUpdated"() {
        def args = "ssc ac list-tokens -q id==#var('token').id --user=$user --password=$pass -o table=id,description"
        when:
            def result = Fcli.run(args)
        then:
            verifyAll(result.stdout) {
                size()==2
                it[0].replace(' ', '').equals("IdDescription")
                it[1].endsWith("updatedDescription ");
            }
    }
    
    def "revoke"() {
        def args = "ssc ac revoke-token ::token::restToken --user=$user --password=$pass"
        when:
            def result = Fcli.run(args)
        then:
            verifyAll(result.stdout) {
                size()==2
                it[0].contains("Response code")
                it[1].contains("200");
            }
    }
    
    def "verifyRevoked"() {
        def args = "ssc ac list-tokens -q id==#var('token').id --user=$user --password=$pass"
        when:
            def result = Fcli.run(args)
        then:
            verifyAll(result.stdout) {
                size()==1
                it[0].contains("No data")
            }
    }
}
